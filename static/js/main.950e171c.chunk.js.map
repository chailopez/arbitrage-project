{"version":3,"sources":["Utils/NumberUtils.js","Components/ExchangeSushiswapTable.js","Components/ExchangeUniswapTable.js","Pages/DashboardPage.js","Services/GraphQL/Client.js","App.js","reportWebVitals.js","index.js"],"names":["NumberUtils","formatDecimal","amount","Intl","NumberFormat","style","format","ExchangeSushiswapTable","GET_QUERY","gql","useQuery","loading","error","data","className","map","column","index","toUpperCase","pairs","id","name","token0Price","token1Price","data-bs-toggle","data-bs-placement","title","data-value","ExchangeUniswapTable","DashboardPage","Client","ApolloClient","uri","cache","InMemoryCache","App","client","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAQeA,EAJK,CAChBC,cALkB,SAACC,GACnB,OAAO,IAAIC,KAAKC,aAAa,QAAS,CAACC,MAAO,YAAYC,OAAOJ,K,OCgEtDK,EA7DgB,WAC3B,IAAMC,EAAaC,cAAJ,uMADkB,EAmBAC,mBAASF,GAAlCG,EAnByB,EAmBzBA,QAASC,EAnBgB,EAmBhBA,MAAOC,EAnBS,EAmBTA,KAExB,OAAIF,EAAgB,2CAChBC,EAAc,qDAId,8BACI,wBAAOE,UAAU,kCAAjB,UACI,gCACI,6BAjBA,CACZ,KACA,OACA,cACA,eAcyBC,KAAI,SAACC,EAAQC,GAAT,OAAoB,6BAAiBD,EAAOE,eAAfD,UAGlD,gCACKJ,EAAKM,MAAMJ,KAAI,YAA2C,IAAzCK,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YACrC,OACI,+BACI,6BAAKH,IACL,6BAAKC,IACL,oBACIG,iBAAe,UACfC,oBAAkB,MAClBC,MAAOJ,EACPK,aAAYL,EAJhB,SAI8BtB,EAAYC,cAAcqB,KAExD,oBACIE,iBAAe,UACfC,oBAAkB,MAClBC,MAAOH,EACPI,aAAYJ,EAJhB,SAI8BvB,EAAYC,cAAcsB,OAbnDH,cCyBtBQ,EA7Dc,WACzB,IAAMpB,EAAaC,cAAJ,uMADgB,EAmBEC,mBAASF,GAAlCG,EAnBuB,EAmBvBA,QAASC,EAnBc,EAmBdA,MAAOC,EAnBO,EAmBPA,KAExB,OAAIF,EAAgB,2CAChBC,EAAc,qDAId,8BACI,wBAAOE,UAAU,kCAAjB,UACI,gCACI,6BAjBA,CACZ,KACA,OACA,cACA,eAcyBC,KAAI,SAACC,EAAQC,GAAT,OAAoB,6BAAiBD,EAAOE,eAAfD,UAGlD,gCACKJ,EAAKM,MAAMJ,KAAI,YAA2C,IAAzCK,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,YAAaC,EAAiB,EAAjBA,YACrC,OACI,+BACI,6BAAKH,IACL,6BAAKC,IACL,oBACIG,iBAAe,UACfC,oBAAkB,MAClBC,MAAOJ,EACPK,aAAYL,EAJhB,SAI8BtB,EAAYC,cAAcqB,KAExD,oBACIE,iBAAe,UACfC,oBAAkB,MAClBC,MAAOH,EACPI,aAAYJ,EAJhB,SAI8BvB,EAAYC,cAAcsB,OAbnDH,cCftBS,EArBO,WAIlB,OACI,qBAAKf,UAAU,YAAf,SACI,sBAAKA,UAAU,MAAf,UACI,sBAAKA,UAAU,kBAAf,UACI,gDACA,cAAC,EAAD,OAGJ,sBAAKA,UAAU,kBAAf,UACI,yCACA,cAAC,EAAD,aCRLgB,G,MANA,IAAIC,eAAa,CAE9BC,IAAK,6DACLC,MAAO,IAAIC,mBCSEC,GDHI1B,M,4JCNjB,WACE,OACE,cAAC,iBAAD,CAAgB2B,OAAQN,EAAxB,SACI,cAAC,EAAD,U,GAJQO,IAAMC,YCMTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.950e171c.chunk.js","sourcesContent":["const formatDecimal = (amount) => {\r\n    return new Intl.NumberFormat('en-US', {style: 'decimal'}).format(amount);\r\n}\r\n\r\nconst NumberUtils = {\r\n    formatDecimal\r\n};\r\n\r\nexport default NumberUtils;","import React from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport NumberUtils from '../Utils/NumberUtils';\r\n\r\nconst ExchangeSushiswapTable = () => {\r\n    const GET_QUERY =  gql`\r\n        query {\r\n            pairs {\r\n                id,\r\n                name,\r\n                token0Price,\r\n                token1Price\r\n            }\r\n        }\r\n    `;\r\n\r\n    const columns = [\r\n        'id',\r\n        'name',\r\n        'token0Price',\r\n        'token1Price'\r\n    ];\r\n\r\n    const { loading, error, data } = useQuery(GET_QUERY);\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error, la macamos :(</p>;\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <table className=\"table table-striped table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        {columns.map((column, index) => (<th key={index}>{column.toUpperCase()}</th>))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {data.pairs.map(({id, name, token0Price, token1Price}) => {\r\n                        return (\r\n                            <tr key={id}>\r\n                                <td>{id}</td>\r\n                                <td>{name}</td>\r\n                                <td \r\n                                    data-bs-toggle=\"tooltip\" \r\n                                    data-bs-placement=\"top\" \r\n                                    title={token0Price} \r\n                                    data-value={token0Price}>{NumberUtils.formatDecimal(token0Price)}\r\n                                </td>\r\n                                <td \r\n                                    data-bs-toggle=\"tooltip\" \r\n                                    data-bs-placement=\"top\" \r\n                                    title={token1Price} \r\n                                    data-value={token1Price}>{NumberUtils.formatDecimal(token1Price)}\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExchangeSushiswapTable;\r\n","import React from 'react';\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport NumberUtils from '../Utils/NumberUtils';\r\n\r\nconst ExchangeUniswapTable = () => {\r\n    const GET_QUERY =  gql`\r\n        query {\r\n            pairs {\r\n                id,\r\n                name,\r\n                token0Price,\r\n                token1Price\r\n            }\r\n        }\r\n    `;\r\n\r\n    const columns = [\r\n        'id',\r\n        'name',\r\n        'token0Price',\r\n        'token1Price'\r\n    ];\r\n\r\n    const { loading, error, data } = useQuery(GET_QUERY);\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error, la macamos :(</p>;\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            <table className=\"table table-striped table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        {columns.map((column, index) => (<th key={index}>{column.toUpperCase()}</th>))}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {data.pairs.map(({id, name, token0Price, token1Price}) => {\r\n                        return (\r\n                            <tr key={id}>\r\n                                <td>{id}</td>\r\n                                <td>{name}</td>\r\n                                <td \r\n                                    data-bs-toggle=\"tooltip\" \r\n                                    data-bs-placement=\"top\" \r\n                                    title={token0Price} \r\n                                    data-value={token0Price}>{NumberUtils.formatDecimal(token0Price)}\r\n                                </td>\r\n                                <td \r\n                                    data-bs-toggle=\"tooltip\" \r\n                                    data-bs-placement=\"top\" \r\n                                    title={token1Price} \r\n                                    data-value={token1Price}>{NumberUtils.formatDecimal(token1Price)}\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ExchangeUniswapTable;\r\n","import React from 'react';\r\nimport ExchangeSushiswapTable from '../Components/ExchangeSushiswapTable';\r\nimport ExchangeUniswapTable from '../Components/ExchangeUniswapTable';\r\n\r\nconst DashboardPage = () => {\r\n\r\n   \r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-6 col-sm-12\">\r\n                    <h4>Table 1 chills</h4>\r\n                    <ExchangeSushiswapTable />\r\n                </div>\r\n\r\n                <div className=\"col-6 col-sm-12\">\r\n                    <h4>Table 2</h4>\r\n                    <ExchangeUniswapTable />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default DashboardPage;","import { ApolloClient, InMemoryCache } from '@apollo/client';\r\nimport { gql } from '@apollo/client';\r\n\r\n\r\nconst Client = new ApolloClient({\r\n  //uri: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2',\r\n  uri: 'https://api.thegraph.com/subgraphs/name/sushiswap/exchange',\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nexport default Client;\r\n\r\n\r\nexport const GQL = gql;","import React from 'react';\nimport DashboardPage from './Pages/DashboardPage';\nimport './App.css';\nimport { ApolloProvider } from '@apollo/client';\nimport Client from './Services/GraphQL/Client';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <ApolloProvider client={Client}>\n          <DashboardPage  />\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}